# GitHub Actions Workflow created for handling the release process based on the draft release prepared with the Build workflow.
# Running the publishPlugin task requires all following secrets to be provided: PUBLISH_TOKEN, PRIVATE_KEY, PRIVATE_KEY_PASSWORD, CERTIFICATE_CHAIN.
# See https://plugins.jetbrains.com/docs/intellij/plugin-signing.html for more information.

name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true

jobs:
  release:
    name: Publish Plugin
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # need full history for tagging

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-home-cache-cleanup: true

      - name: Bump gradle.properties → release version
        run: |
          PLUGIN_VERSION=${{ inputs.version }}
          ./scripts/set_release_version.sh $PLUGIN_VERSION
          echo "Release version: $PLUGIN_VERSION"
          echo "PLUGIN_VERSION=${PLUGIN_VERSION}" >> $GITHUB_ENV

      # Publish the plugin to JetBrains Marketplace
      - name: Publish Plugin
        env:
          PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
          CERTIFICATE_CHAIN: ${{ secrets.CERTIFICATE_CHAIN }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          PRIVATE_KEY_PASSWORD: ${{ secrets.PRIVATE_KEY_PASSWORD }}
        run: ./gradlew publishPlugin

      - name: Patch CHANGELOG
        run: |
          ./gradlew patchChangelog

      - name: Commit and tag release
        run: |
          git config user.email "action@github.com"
          git config user.name "GitHub Action"
          git diff --quiet || git commit -am "chore(release): v${PLUGIN_VERSION}"
          git tag "v${PLUGIN_VERSION}"
          git push origin HEAD:main
          git push origin "v${PLUGIN_VERSION}"


# Upload artifact as a release asset
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${PLUGIN_VERSION}" \
            build/distributions/* \
            --title "${PLUGIN_VERSION}" \
            --notes-file CHANGELOG.md

      - name: Bump gradle.properties → next SNAPSHOT version
        run: |
          NEW_VERSION=$(./scripts/ci_new_snapshot.sh)
          echo "Set $NEW_VERSION in gradle.properties"
          git commit -am "chore(skip-release): set version to $NEW_VERSION"
          git push origin ${{ github.ref }}

