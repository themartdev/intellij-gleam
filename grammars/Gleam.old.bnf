{
  parserClass='com.github.themartdev.intellijgleam.lang.parser.GleamParser'

  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'

  elementTypeHolderClass='com.github.themartdev.intellijgleam.lang.psi.GleamElementTypes'
  elementTypeClass='com.github.themartdev.intellijgleam.lang.psi.GleamElementType'
//  tokenTypeClass='com.github.themartdev.intellijgleam.lang.psi.GleamTokenType'

  psiClassPrefix='Gleam'
  psiImplClassSuffix='Impl'
  psiPackage="com.github.themartdev.intellijgleam.lang.psi"
  psiImplPackage="com.github.themartdev.intellijgleam.lang.psi.impl"

  tokens=[
    // Language keywords https://github.com/gleam-lang/gleam/blob/main/compiler-core/src/parse/lexer.rs#L24
    AS              = 'as'
    ASSERT          = 'assert'
    AUTO            = 'auto'
    CASE            = 'case'
    CONST           = 'const'
    DELEGATE        = 'delegate'
    DERIVE          = 'derive'
    ECHO            = 'echo'
    ELSE            = 'else'
    EXTERNAL        = 'external'
    FN              = 'fn'
    IF              = 'if'
    IMPLEMENT       = 'implement'
    IMPORT          = 'import'
    LET             = 'let'
    MACRO           = 'macro'
    OPAQUE          = 'opaque'
    PANIC           = 'panic'
    PUB             = 'pub'
    TEST            = 'test'
    TODO            = 'todo'
    TRY             = 'try'
    TYPE            = 'type'
    USE             = 'use'

    // Grouping symbols
    LBRACE          = '{'
    RBRACE          = '}'
    LPAREN          = '('
    RPAREN          = ')'
    LBRACK          = '['
    RBRACK          = ']'

    // Operators and punctuation
    DOT             = '.'
    COMMA           = ','
    COLON           = ':'
    HASH            = '#'
    BANG            = '!'
    EQUAL           = '='
    EQUAL_EQUAL     = '=='
    NOT_EQUAL       = '!='
    VBAR            = '|'
    VBAR_VBAR       = '||'
    AMPER_AMPER     = '&&'
    LT_LT           = '<<'
    GT_GT           = '>>'
    PIPE            = '|>'
    R_ARROW         = '->'
    L_ARROW         = '<-'
    DOT_DOT         = '..'
    PLUS            = '+'
    MINUS           = '-'
    STAR            = '*'
    SLASH           = '/'
    LESS            = '<'
    GREATER         = '>'
    LESS_EQUAL      = '<='
    GREATER_EQUAL   = '>='
    PERCENT         = '%'
    PLUS_DOT        = '+.'
    MINUS_DOT       = '-.'
    STAR_DOT        = '*.'
    SLASH_DOT       = '/.'
    LESS_DOT        = '<.'
    GREATER_DOT     = '>.'
    LESS_EQUAL_DOT  = '<=.'
    GREATER_EQUAL_DOT = '>=.'
    LT_GT           = '<>'

    // Literals
    STRING_LITERAL  = "regexp:\"([^\"\\]|\\.)*\""
    INTEGER_LITERAL = "regexp:-?(0[bB][0-1_]+|0[xX][0-9a-fA-F_]+|0[oO][0-7_]+|[0-9][0-9_]*)"
    FLOAT_LITERAL   = "regexp:-?([0-9][0-9_]*\.[0-9_]+[0-9]*([Ee][+\-]?[0-9]+)?|[0-9][0-9_]*[Ee][+\-]?[0-9]+)"
    BOOLEAN_LITERAL = "regexp:True|False"

    // Identifiers
    DISCARD_NAME    = "regexp:_[_0-9a-z]*"
    UP_IDENTIFIER   = "regexp:[A-Z][a-zA-Z0-9_]*"
    IDENTIFIER      = "regexp:[a-zA-Z_][a-zA-Z0-9_]*"

    // Comments
    MODULE_COMMENT  = "regexp:////[^\n]*"
    FUNCTION_COMMENT="regexp:///[^\n]*"
    LINE_COMMENT    = "regexp://[^\n]*"

    // Whitespace
    WHITE_SPACE     = "regexp:\s+"
  ]
}




// Rules
//sourceFile ::= (statement | expressionSeq | targetGroup)*
//
//statement ::= imports
//            | constant
//            | externalFunction
//            | function
//            | typeDefinition
//            | typeAlias


